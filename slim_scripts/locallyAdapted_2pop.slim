// Keywords: 

initialize() {
	// For testing: variable definitions
	//defineConstant("mu", 1e-5);
	//defineConstant("s", 0.01);
	//defineConstant("m", 0.001);
	//defineConstant("rep", 1);
	//defineConstant("rec", 1e-6);
	
	defineConstant("L", 12000);
	defineConstant("INV_LENGTH", 10000);     // set inversion to be centered on the genome
	defineConstant("ALLELE_STARTING_FREQ", 50);
	
	initializeMutationRate(mu);
	initializeMutationType("m1", 0.5, "f", 0.0); // neutral sites
	initializeMutationType("m2", 0.5, "f", s);  // beneficial by default (p1)
	// (below) deleterious mutation with gamma distributed fitness effects
	initializeMutationType("m5", 0.5, "g", -0.01, 0.1); // mean=-0.01, shape=0.1
	
	initializeGenomicElementType("g1", c(m1,m5), c(9,1)); // ratio of 9:1 for m1:m5 (ie. 10% deleterious)
	//initializeGenomicElementType("g2", m2, 1.0);	
	m1.convertToSubstitution = F;
	m2.convertToSubstitution = F;
	initializeGenomicElement(g1, 0, L-1);
	initializeRecombinationRate(rec);
	
	m1.mutationStackGroup = -1;   // to make sure separate mutations do not stack at a site
	m1.mutationStackPolicy = "f";
	m2.mutationStackGroup = -1;
	m2.mutationStackPolicy = "f";
	m5.mutationStackGroup = -1;
	m5.mutationStackPolicy = "f";
}
1 late() {
	defineConstant("simID", getSeed());
	
	sim.addSubpop("p1", 1000);
	sim.addSubpop("p2", 1000);
	p1.setMigrationRates(p2, m);  // migration rate of p2 into p1
	p2.setMigrationRates(p1, m);

}

fitness(m2, p2)   // different fitness effect of m2 on p2
{
	s2 = (1.0/(1.0+s)-1.0);
	if (homozygous)
		return 1.0 + s2;
	else
		return 1.0 + s2/2;
}

1:5000 late() {

}

5000 late() {
	// save the state of the simulation (for looping back to)
	sim.outputFull(tempdir + "slim5000_" + simID + ".txt");
	
	p1.outputMSSample(200, replace=F, filePath=paste0(c("Outputs/", dir_name, "/5000/linkage2P_p1", "_", s, "_", m, "_", rep, "_", ".txt")));
	p2.outputMSSample(200, replace=F, filePath=paste0(c("Outputs/", dir_name, "/5000/linkage2P_p2", "_", s, "_", m, "_", rep, "_", ".txt")));
	LAA = sample(p1.genomes, ALLELE_STARTING_FREQ);  // add Locally Adapted Alleles to half of population 1
	LAA.addNewDrawnMutation(m2, 3000);
	LAA.addNewDrawnMutation(m2, 7000);
}


5000:15000 late(){
	// restart end part of sim (5000+) if locally adapted alleles are lost	
	if(sim.countOfMutationsOfType(m2) < 2)
	{
		cat(simID + ": LOST â€“ RESTARTING\n");
		// go back to generation 1000
		sim.readFromPopulationFile(tempdir + "slim5000_" + simID + ".txt");
		
		// reinitialize migration rates
		p1.setMigrationRates(p2, m);
		p2.setMigrationRates(p1, m);
		
		// start a newly seeded run
		setSeed(rdunif(1, 0, asInteger(2^62) - 1));
		
		// re-introduce the sweep mutation
		LAA = sample(p1.genomes, ALLELE_STARTING_FREQ);
		LAA.addNewDrawnMutation(m2, 3000);
		LAA.addNewDrawnMutation(m2, 7000);
	}
	// create output every 1000 generations	
	if (any(sim.generation == c(6:15)*1000)) {
		p1.outputMSSample(200, replace=F, filePath=paste0(c("Outputs/", dir_name, "/", sim.generation, "/linkage2P_p1", "_", s, "_", m, "_", rep, "_", ".txt")));
		p2.outputMSSample(200, replace=F, filePath=paste0(c("Outputs/", dir_name, "/", sim.generation, "/linkage2P_p2", "_", s, "_", m, "_", rep, "_", ".txt")));
	}
}