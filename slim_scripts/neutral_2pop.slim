// Keywords: 

initialize() {
	// For testing: variable definitions
	//defineConstant("mu", 1e-6);
	//defineConstant("s", 0.01);
	//defineConstant("m", 0.001);
	//defineConstant("rep", 1);
	
	defineConstant("L", 22000);
	
	initializeMutationRate(mu);
	initializeMutationType("m1", 0.5, "f", 0.0); // neutral sites
	
	initializeGenomicElementType("g1", m1, 1.0);
	//initializeGenomicElementType("g2", m2, 1.0);	
	m1.convertToSubstitution = F;
	initializeGenomicElement(g1, 0, L-1);
	initializeRecombinationRate(1e-7);
	
	m1.mutationStackGroup = -1;   // to make sure separate mutations do not stack at a site
	m1.mutationStackPolicy = "f";
}

1 late() {
	defineConstant("simID", getSeed());
	
	sim.addSubpop("p1", 1000);
	sim.addSubpop("p2", 1000);
	p1.setMigrationRates(p2, m);  // migration rate of p2 into p1
	p2.setMigrationRates(p1, m);

}

5000 late() {
	p1.outputMSSample(200, replace=F, filePath=paste0(c("Outputs/", dir_name, "/5000/linkage2P_p1", "_", s, "_", m, "_", rep, "_", ".txt")));
	p2.outputMSSample(200, replace=F, filePath=paste0(c("Outputs/", dir_name, "/5000/linkage2P_p2", "_", s, "_", m, "_", rep, "_", ".txt")));
}

5000:15000 late() {
	// create output every 1000 generations	
	if (any(sim.generation == c(6:15)*1000)) {
		p1.outputMSSample(200, replace=F, filePath=paste0(c("Outputs/", dir_name, "/", sim.generation, "/linkage2P_p1", "_", s, "_", m, "_", rep, "_", ".txt")));
		p2.outputMSSample(200, replace=F, filePath=paste0(c("Outputs/", dir_name, "/", sim.generation, "/linkage2P_p2", "_", s, "_", m, "_", rep, "_", ".txt")));
	}
}